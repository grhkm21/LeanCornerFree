import Mathlib.Analysis.Convex.SpecificFunctions.Basic
import Mathlib.Analysis.SpecialFunctions.Log.Base
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.Analysis.SpecialFunctions.Pow.Real

open Nat hiding log sqrt
open Real Filter Asymptotics Topology Set

variable {c : ‚Ñù} (hc : 1 < c) (r : ‚Ñù)
  {f g : ‚Ñï ‚Üí ‚Ñù} (hf : f =o[atTop] (fun _ ‚Ü¶ (1 : ‚Ñù))) (hg : g =o[atTop] (fun _ ‚Ü¶ (1 : ‚Ñù)))

/- Missing Mathlib: continuousAt_logb -/
theorem continuousAt_logb {x b : ‚Ñù} (hx : x ‚â† 0) : ContinuousAt (logb b) x :=
  (continuousAt_log hx).div_const b.log

theorem Filter.Tendsto.logb {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù} {l : Filter Œ±} {x : ‚Ñù} (h : Tendsto f l (ùìù x))
    (hx : x ‚â† 0) (b) :
    Tendsto (fun x => logb b (f x)) l (ùìù (logb b x)) :=
  ((continuousAt_log hx).div_const b.log).tendsto.comp h

lemma useful_aux : ‚àÉ a, ‚àÄ b ‚â• a, 0 < 1 + f b := by
  rw [isLittleO_one_iff, atTop_basis.tendsto_iff (nhds_basis_Ioo_pos _)] at hf
  obtain ‚ü®a, ha‚ü© := hf (1 / 2) (by simp)
  use a
  intro b hb
  replace ha := mem_Ioo.mp $ ha.right b (mem_Ici.mpr hb)
  linarith

lemma aux1 : ‚àÉ h : ‚Ñï ‚Üí ‚Ñù, h =o[atTop] (fun _ ‚Ü¶ (1 : ‚Ñù)) ‚àß
    (fun d ‚Ü¶ (c + f d) ^ r) =·∂†[atTop] (fun d ‚Ü¶ c ^ (r + h d)) := by
  use fun d ‚Ü¶ r * logb c (1 + (f d / c)), ?_, ?_
  ¬∑ rw [isLittleO_one_iff] at hf hg ‚ä¢
    simpa using (((hf.div_const c).const_add 1).logb (by simp) c).const_mul r
  ¬∑ obtain ‚ü®a, ha‚ü© := useful_aux hf
    simp only [EventuallyEq, eventually_atTop, ge_iff_le]
    use a
    intro b hb
    have : 0 < 1 + f b / c := by
      specialize ha b hb
      have : -1 / c < f b / c := by gcongr; linarith
      have : -1 < -1 / c := by rwa [neg_div, neg_lt_neg_iff, div_lt_iff (by linarith), one_mul]
      linarith
    rw [‚Üê mul_one_add, mul_comm r, rpow_mul (by linarith), ‚Üê logb_self_eq_one hc,
      ‚Üê logb_mul, rpow_logb _ _ _, logb_self_eq_one hc, mul_one_add, mul_div_cancel‚ÇÄ]
    all_goals try linarith
    ¬∑ simp [logb_self_eq_one hc]
      exact mul_pos (by linarith) this
    ¬∑ specialize ha b hb
      simp [logb_self_eq_one hc, this.ne.symm]

lemma aux2 : ‚àÉ h : ‚Ñï ‚Üí ‚Ñù, h =o[atTop] (fun _ ‚Ü¶ (1 : ‚Ñù)) ‚àß
    (fun d ‚Ü¶ (c + f d) ^ (g d)) =·∂†[atTop] (fun d ‚Ü¶ c ^ h d) := by
  use fun d ‚Ü¶ g d * logb c (c + f d), ?_, ?_
  ¬∑ rw [isLittleO_one_iff] at hf hg ‚ä¢
    simpa using Tendsto.mul hg $ (hf.const_add c).logb (by linarith) c
  ¬∑ obtain ‚ü®a, ha‚ü© := useful_aux hf
    simp only [EventuallyEq, eventually_atTop, ge_iff_le]
    use a
    intro b hb
    rw [mul_comm, rpow_mul, rpow_logb ?_ hc.ne.symm ?_]
    all_goals linarith [ha b hb]

/- Step 1: (c + o(1)) ^ (k + o(1)) = c ^ (k + o(1)) -/
lemma step1 : ‚àÉ h : ‚Ñï ‚Üí ‚Ñù, h =o[atTop] (fun _ ‚Ü¶ (1 : ‚Ñù)) ‚àß
    (fun d ‚Ü¶ (c + f d) ^ (r + g d)) =·∂†[atTop] (fun d ‚Ü¶ c ^ (r + h d)) := by
  /- (1+o(1))^(r+o(1)) = c^(r+o(1)) -/
  obtain ‚ü®a, ha‚ü© := useful_aux hf
  obtain ‚ü®l‚ÇÅ, hl‚ÇÅ‚ü© := aux1 hc r hf
  obtain ‚ü®l‚ÇÇ, hl‚ÇÇ‚ü© := aux2 hc hf hg
  use l‚ÇÅ + l‚ÇÇ, by simpa using hl‚ÇÅ.left.add hl‚ÇÇ.left
  trans (fun d ‚Ü¶ (c + f d) ^ r * (c + f d) ^ (g d))
  ¬∑ rw [EventuallyEq, eventually_atTop]
    use a, fun b hb ‚Ü¶ rpow_add (by linarith [ha b hb]) _ _
  refine (hl‚ÇÅ.right.mul hl‚ÇÇ.right).trans ?_
  simp only [EventuallyEq, eventually_atTop, Pi.add_apply]
  use 0, fun b _ ‚Ü¶ by repeat rw [rpow_add] <;> try linarith


